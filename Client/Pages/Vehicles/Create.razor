@page "/vehicles/create/" 
@inject HttpClient _client
@inject NavigationManager _navManager  

<h3 class="card-title">Create New Vehicle</h3>
<br/>
<hr/>

<EditForm Model="@vehicle" OnValidSubmit="CreateVehicle">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label>Make:</label>
        <select @bind="vehicle.MakeId" class="form-control">
            <option value="">--Select Make --</option>
            @if (Makes != null)
            {
                foreach (var make in Makes)
                {
                    <option value="@make.Id">@make.Name</option>
                }
            }
        </select>
        <ValidationMessage For="@(() => vehicle.MakeId)"></ValidationMessage>
    </div>

    <div class="form-group">
        <label>Model:</label>
        <select @bind="vehicle.ModelId" class="form-control">
            <option value="">--Select Model --</option>
            @if (Models != null)
            {
                foreach (var model in Models)
                {
                    <option value="@model.Id">@model.Name</option>
                }
            }
        </select>
        <ValidationMessage For="@(() => vehicle.ModelId)"></ValidationMessage>
    </div>

    <div class="form-group">
        <label>Color:</label>
        <InputSelect @bind-Value="vehicle.ColorId" class="form-control">
            <option value="">--Select Color --</option>
            @if (Colors != null)
            {
                foreach (var color in Colors)
                {
                    <option value="@color.Id">@color.Name</option>
                }
            }
        </InputSelect>
        <ValidationMessage For="@(() => vehicle.Year)"></ValidationMessage>
    </div>

    <div class="form-group">
        <label>Year:</label>
        <InputNumber @bind-Value="vehicle.Year" class="form-control">
        </InputNumber>
        <ValidationMessage For="@(() => vehicle.Year)"></ValidationMessage>

    </div>

    <div class="form-group">
        <label>License Plate Number:</label>
        <InputText @bind-Value="vehicle.LicensePlateNumber" class="form-control">
        </InputText>
        <ValidationMessage For="@(() => vehicle.LicensePlateNumber)"></ValidationMessage>

    </div>

    <div class="form-group">
        <label>Vehicle Identification Number:</label>
        <InputText @bind-Value="vehicle.Vin" class="form-control">
        </InputText>
        <ValidationMessage For="@(() => vehicle.Vin)"></ValidationMessage>
    </div>

    <div class="form-group">
        <label>Daily Rate:</label>
        <InputNumber @bind-Value="vehicle.RentalRate" class="form-control">
        </InputNumber>
        <ValidationMessage For="@(() => vehicle.RentalRate)"></ValidationMessage>
    </div>

    <button type="submit" class="btn btn-primary btn-block">Create Vehicle</button>

</EditForm>


@code {
    Vehicle vehicle = new Vehicle();
    private IList<Make> Makes;
    private IList<Model> Models;
    private IList<Color> Colors;

    protected async override Task OnInitializedAsync()
    {
        Makes = await _client.GetFromJsonAsync<List<Make>>($"{Endpoints.MakesEndpoint}");
        Models = await _client.GetFromJsonAsync<List<Model>>($"{Endpoints.ModelsEndpoint}");
        Colors = await _client.GetFromJsonAsync<List<Color>>($"{Endpoints.ColorsEndpoint}");
    }

    private async Task CreateVehicle()
    {
        await _client.PostAsJsonAsync(Endpoints.VehiclesEndpoint, vehicle);
        _navManager.NavigateTo("/vehicles"); 
    }
}