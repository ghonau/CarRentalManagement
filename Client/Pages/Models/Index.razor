@page "/models/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication


@attribute [Authorize]
@inject HttpClient _client
@inject IJSRuntime js

<h3 class="card-title">Models list</h3>
<hr />
<br />
<a href="/models/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Model
</a>

@if (Models == null)
{
    <div class="alert alert-info">Loading Models... </div>
}
else
{
    <table class="table table-responsive">
        <thead class="thead-light">
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var model in Models)
            {
                <tr>
                    <td>@model.Name</td>
                    <td>
                        <a href="/models/view/@model.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/models/edit/@model.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="(() => Delete(model.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private async Task Delete(int modelId)
    {
        var model = Models.First(m => m.Id == modelId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {model.Name}");
        if (confirm)
        {
            await _client.DeleteAsync(Endpoints.MakesEndpoint + $"/{modelId}");
            await OnInitializedAsync();
        }
    }
    private List<Model> Models;
    protected override async Task OnInitializedAsync()
    {
        Models = await _client.GetFromJsonAsync<List<Model>>(Endpoints.ModelsEndpoint);
    }

}
