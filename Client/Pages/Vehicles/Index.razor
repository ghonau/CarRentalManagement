@page "/vehicles/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication


@attribute [Authorize]
@inject HttpClient _client
@inject IJSRuntime js

<h3 class="card-title">Vehicles list</h3>
<hr />
<br />
<a href="/vehicles/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Vehicle
</a>

@if (Vehicles == null)
{
    <div class="alert alert-info">Loading Vehicles... </div>
}
else
{
    <table class="table ">
        <thead class="thead-light">
            <tr>
                <th>Make</th>
                <th>Model</th>
                <th>Year</th>
                <th>Daily Rate</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vehicle in Vehicles)
            {
            <tr>
                <td>@vehicle.Make.Name</td>
                <td>@vehicle.Model.Name</td>
                <td>@vehicle.Year</td>
                <td>@vehicle.RentalRate</td>

                <td>
                    <a href="/vehicles/view/@vehicle.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/vehicles/edit/@vehicle.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="(() => Delete(vehicle.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {

    private async Task Delete(int vehicleId)
    {
        var vehicle = Vehicles.First(m => m.Id == vehicleId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete");
        if (confirm)
        {
            await _client.DeleteAsync(Endpoints.MakesEndpoint + $"/{vehicleId}");
            await OnInitializedAsync();
        }
    }
    private List<Vehicle> Vehicles;
    protected override async Task OnInitializedAsync()
    {
        Vehicles = await _client.GetFromJsonAsync<List<Vehicle>>(Endpoints.VehiclesEndpoint);
    }

}
